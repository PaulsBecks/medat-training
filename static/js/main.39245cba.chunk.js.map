{"version":3,"sources":["containers/Index/index.js","components/WordQuizCard/WordQuizCard.js","constants/index.js","containers/Words/Words.js","App.js","serviceWorker.js","index.js"],"names":["shuffle","str","split","sort","Math","random","join","word","onNextClick","wordInRandomOrder","useMemo","toLowerCase","quizChars","firstChar","char","length","includes","chooseQuizChars","shuffledQuizChars","useState","selectedChar","setSelectedChar","showSolution","setShowSolution","map","key","type","name","checked","onChange","onClick","words","require","wordIndex","setWordIndex","className","WordQuizCard","App","Index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qrCAGe,G,KAAA,WACX,OACI,6BACI,6CACA,kBAAC,EAAD,S,OCLNA,EAAU,SAACC,GACb,OAAOA,EAAIC,MAAM,IAAIC,KAAK,iBAAI,GAAIC,KAAKC,WAAUC,KAAK,KAqB3C,cAA4B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACdC,EAAoBC,kBAAQ,kBAAIV,EAAQO,GAAMI,eAAe,CAACJ,IAC9DK,EAAYF,kBAAQ,kBApBN,SAACH,GACrB,IAAMM,EAAYN,EAAK,GAAGI,cACpBF,EAAoBT,EAAQO,GAAMI,cACpCC,EAAYC,EAEhB,IAAI,IAAIC,KAAQL,EAAmB,CAC/B,GAAGG,EAAUG,QAAU,EACnB,MAGAH,EAAUI,SAASP,EAAkBK,MACrCF,GAAaH,EAAkBK,IAIvC,OAAOF,EAKuBK,CAAgBV,IAAO,CAACA,IAChDW,EAAoBR,kBAAQ,kBAAIV,EAAQY,IAAY,CAACA,IAHrB,EAIEO,mBAASD,EAAkB,IAJ7B,mBAI/BE,EAJ+B,KAIjBC,EAJiB,OAKEF,oBAAS,GALX,mBAK/BG,EAL+B,KAKjBC,EALiB,KAOtC,OACI,6BACI,4BAAKd,GACL,sEACA,4BAEQS,EAAkBhB,MAAM,IAAIsB,IAAI,SAACV,GAAD,OAC5B,wBAAIW,IAAKX,GACL,2BAAOY,KAAK,QAAQC,KAAK,YAAYC,QAASd,IAASM,EAAcS,SAAU,kBAAIR,EAAgBP,MAClGA,MAMbQ,GAAgB,4BAAKf,GAEzB,4BAAQuB,QAAS,kBAAIP,GAAgB,KAArC,aACA,4BAAQO,QAAStB,GAAjB,iBCjDCuB,EAAQC,EAAQ,ICMd,G,MAAA,WAAO,IAAD,EAEiBb,mBAAS,GAF1B,mBAEVc,EAFU,KAECC,EAFD,KAIjB,OACI,yBAAKC,UAAU,oBAEPJ,GAASA,EAAMhB,QAAUgB,EAAMhB,OAASkB,GAAa,kBAACG,EAAD,CAAc7B,KAAMwB,EAAME,GAAYR,IAAKM,EAAME,GAAYzB,YAAa,kBAAI0B,EAAaD,EAAU,SCJ3JI,MANf,WACE,OACE,kBAACC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.39245cba.chunk.js","sourcesContent":["import React from 'react';\nimport { Words } from '..';\n\nexport default () => {\n    return (\n        <div>\n            <h1> Train Medat </h1>\n            <Words />\n        </div>\n    );\n}","import React, { useMemo, useState } from 'react';\n\nconst shuffle = (str) => {\n    return str.split('').sort(()=>0.5-Math.random()).join('');\n}\n\nconst chooseQuizChars = (word) => {\n    const firstChar = word[0].toLowerCase();\n    const wordInRandomOrder = shuffle(word).toLowerCase()\n    let quizChars = firstChar;\n\n    for(let char in wordInRandomOrder) {\n        if(quizChars.length >= 4) {\n            break;\n        }\n\n        if(!quizChars.includes(wordInRandomOrder[char])){\n            quizChars += wordInRandomOrder[char];\n        }\n    }\n\n    return quizChars;\n}\n\nexport default ({ word, onNextClick }) => {\n    const wordInRandomOrder = useMemo(()=>shuffle(word).toLowerCase(), [word]);\n    const quizChars = useMemo(()=>chooseQuizChars(word), [word]);\n    const shuffledQuizChars = useMemo(()=>shuffle(quizChars), [quizChars]);\n    const [selectedChar, setSelectedChar] = useState(shuffledQuizChars[0]);\n    const [showSolution, setShowSolution] = useState(false);\n\n    return (\n        <div>\n            <h2>{wordInRandomOrder}</h2>\n            <p>Dieses Wort beginnt mit dem Buchstaben:</p>\n            <ul>\n                {\n                    shuffledQuizChars.split('').map((char) => (\n                        <li key={char}>\n                            <input type=\"radio\" name=\"quiz-char\" checked={char === selectedChar} onChange={()=>setSelectedChar(char)}/>\n                            {char}\n                        </li>\n                    ))\n                }\n            </ul>\n            {\n                showSolution && <h3>{word}</h3>\n            }\n            <button onClick={()=>setShowSolution(true)}>Lösung</button>\n            <button onClick={onNextClick}>Nächstes</button>\n        </div>\n    );\n}","export const words = require('./words.json');","import React, { useState } from 'react';\nimport { WordQuizCard } from '../../components';\nimport { words } from '../../constants';\n\nimport './Words.css';\n\nexport default () => {\n\n    const [wordIndex, setWordIndex] = useState(0);\n\n    return (\n        <div className=\"mt-de-words-page\">\n            {\n                words && words.length && words.length > wordIndex && <WordQuizCard word={words[wordIndex]} key={words[wordIndex]} onNextClick={()=>setWordIndex(wordIndex+1)}/>\n            }\n        </div>\n    )\n}","import React from 'react';\nimport { Index } from './containers';\n\nfunction App() {\n  return (\n    <Index/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}